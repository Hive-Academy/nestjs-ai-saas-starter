name: PR Checks

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint code
        run: npx nx run-many -t lint

      - name: Run tests
        run: npx nx run-many -t test

      - name: Build libraries
        run: npx nx run-many -t build -p nestjs-chromadb,nestjs-neo4j,nestjs-langgraph

      - name: Test publishing (dry run)
        run: npx nx run-many -t publish --dry-run -p nestjs-chromadb,nestjs-neo4j,nestjs-langgraph

      - name: Check conventional commits
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

      - name: Validate package.json files
        run: |
          echo "Validating package.json files..."
          for lib in nestjs-chromadb nestjs-neo4j nestjs-langgraph; do
            echo "Checking libs/$lib/package.json"
            if ! jq empty "libs/$lib/package.json" 2>/dev/null; then
              echo "‚ùå Invalid JSON in libs/$lib/package.json"
              exit 1
            fi

            # Check required fields
            if ! jq -e '.name' "libs/$lib/package.json" > /dev/null; then
              echo "‚ùå Missing 'name' field in libs/$lib/package.json"
              exit 1
            fi

            if ! jq -e '.version' "libs/$lib/package.json" > /dev/null; then
              echo "‚ùå Missing 'version' field in libs/$lib/package.json"
              exit 1
            fi

            echo "‚úÖ libs/$lib/package.json is valid"
          done

      - name: Check for breaking changes
        run: |
          echo "Checking for potential breaking changes..."
          if git diff --name-only origin/main...HEAD | grep -E "(src/.*\.ts$|package\.json$)" | head -10; then
            echo "üìù Files changed that may affect the public API"
            echo "Please ensure proper semantic versioning in your commit messages"
          fi

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities in dependencies
        run: |
          echo "Checking for known vulnerabilities..."
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "‚ùå High severity vulnerabilities found"
            npm audit --audit-level=high
            exit 1
          else
            echo "‚úÖ No high severity vulnerabilities found"
          fi

  size-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build libraries
        run: npx nx run-many -t build -p nestjs-chromadb,nestjs-neo4j,nestjs-langgraph,shared

      - name: Check bundle sizes
        run: |
          echo "üì¶ Checking bundle sizes..."
          for lib in nestjs-chromadb nestjs-neo4j nestjs-langgraph shared; do
            if [ -d "dist/libs/$lib" ]; then
              size=$(du -sh "dist/libs/$lib" | cut -f1)
              echo "üìä @anubis/$lib: $size"

              # Warn if bundle is larger than 1MB
              size_bytes=$(du -sb "dist/libs/$lib" | cut -f1)
              if [ "$size_bytes" -gt 1048576 ]; then
                echo "‚ö†Ô∏è  Warning: @anubis/$lib bundle size is larger than 1MB"
              fi
            fi
          done

  comment-pr:
    runs-on: ubuntu-latest
    needs: [validate, security, size-check]
    if: always()

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## PR Checks Summary')
            );

            const validate = '${{ needs.validate.result }}';
            const security = '${{ needs.security.result }}';
            const sizeCheck = '${{ needs.size-check.result }}';

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚è≥';
              }
            };

            const body = `## PR Checks Summary

            ${getEmoji(validate)} **Validation**: ${validate}
            ${getEmoji(security)} **Security**: ${security}
            ${getEmoji(sizeCheck)} **Size Check**: ${sizeCheck}

            ${validate === 'success' && security === 'success' && sizeCheck === 'success'
              ? 'üéâ All checks passed! This PR is ready for review.'
              : '‚ö†Ô∏è Some checks failed. Please review the workflow logs.'}

            ---
            *This comment is automatically updated by the PR Checks workflow.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
